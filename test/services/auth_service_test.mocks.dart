// Mocks generated by Mockito 5.4.6 from annotations
// in moustra/test/services/auth_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:auth0_flutter/auth0_flutter.dart' as _i3;
import 'package:auth0_flutter_platform_interface/auth0_flutter_platform_interface.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeCredentials_0 extends _i1.SmartFake implements _i2.Credentials {
  _FakeCredentials_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserProfile_2 extends _i1.SmartFake implements _i2.UserProfile {
  _FakeUserProfile_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CredentialsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCredentialsManager extends _i1.Mock
    implements _i3.CredentialsManager {
  MockCredentialsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Credentials> credentials({
    int? minTtl = 0,
    Set<String>? scopes = const {},
    Map<String, String>? parameters = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(#credentials, [], {
              #minTtl: minTtl,
              #scopes: scopes,
              #parameters: parameters,
            }),
            returnValue: _i4.Future<_i2.Credentials>.value(
              _FakeCredentials_0(
                this,
                Invocation.method(#credentials, [], {
                  #minTtl: minTtl,
                  #scopes: scopes,
                  #parameters: parameters,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Credentials>);

  @override
  _i4.Future<_i2.Credentials> renewCredentials({
    Map<String, String>? parameters = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(#renewCredentials, [], {#parameters: parameters}),
            returnValue: _i4.Future<_i2.Credentials>.value(
              _FakeCredentials_0(
                this,
                Invocation.method(#renewCredentials, [], {
                  #parameters: parameters,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Credentials>);

  @override
  _i4.Future<bool> storeCredentials(_i2.Credentials? credentials) =>
      (super.noSuchMethod(
            Invocation.method(#storeCredentials, [credentials]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasValidCredentials({int? minTtl = 0}) =>
      (super.noSuchMethod(
            Invocation.method(#hasValidCredentials, [], {#minTtl: minTtl}),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> clearCredentials() =>
      (super.noSuchMethod(
            Invocation.method(#clearCredentials, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [WebAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebAuthentication extends _i1.Mock implements _i3.WebAuthentication {
  MockWebAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Credentials> login({
    String? audience,
    Set<String>? scopes = const {
      'openid',
      'profile',
      'email',
      'offline_access',
    },
    String? redirectUrl,
    String? organizationId,
    String? invitationUrl,
    bool? useHTTPS = false,
    List<String>? allowedBrowsers = const [],
    bool? useEphemeralSession = false,
    Map<String, String>? parameters = const {},
    _i2.IdTokenValidationConfig? idTokenValidationConfig =
        const _i2.IdTokenValidationConfig(),
    _i2.SafariViewController? safariViewController,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#login, [], {
              #audience: audience,
              #scopes: scopes,
              #redirectUrl: redirectUrl,
              #organizationId: organizationId,
              #invitationUrl: invitationUrl,
              #useHTTPS: useHTTPS,
              #allowedBrowsers: allowedBrowsers,
              #useEphemeralSession: useEphemeralSession,
              #parameters: parameters,
              #idTokenValidationConfig: idTokenValidationConfig,
              #safariViewController: safariViewController,
            }),
            returnValue: _i4.Future<_i2.Credentials>.value(
              _FakeCredentials_0(
                this,
                Invocation.method(#login, [], {
                  #audience: audience,
                  #scopes: scopes,
                  #redirectUrl: redirectUrl,
                  #organizationId: organizationId,
                  #invitationUrl: invitationUrl,
                  #useHTTPS: useHTTPS,
                  #allowedBrowsers: allowedBrowsers,
                  #useEphemeralSession: useEphemeralSession,
                  #parameters: parameters,
                  #idTokenValidationConfig: idTokenValidationConfig,
                  #safariViewController: safariViewController,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Credentials>);

  @override
  _i4.Future<void> logout({String? returnTo, bool? useHTTPS = false}) =>
      (super.noSuchMethod(
            Invocation.method(#logout, [], {
              #returnTo: returnTo,
              #useHTTPS: useHTTPS,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [Credentials].
///
/// See the documentation for Mockito's code generation for more information.
class MockCredentials extends _i1.Mock implements _i2.Credentials {
  MockCredentials() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get idToken =>
      (super.noSuchMethod(
            Invocation.getter(#idToken),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#idToken),
            ),
          )
          as String);

  @override
  String get accessToken =>
      (super.noSuchMethod(
            Invocation.getter(#accessToken),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#accessToken),
            ),
          )
          as String);

  @override
  DateTime get expiresAt =>
      (super.noSuchMethod(
            Invocation.getter(#expiresAt),
            returnValue: _FakeDateTime_1(this, Invocation.getter(#expiresAt)),
          )
          as DateTime);

  @override
  Set<String> get scopes =>
      (super.noSuchMethod(Invocation.getter(#scopes), returnValue: <String>{})
          as Set<String>);

  @override
  _i2.UserProfile get user =>
      (super.noSuchMethod(
            Invocation.getter(#user),
            returnValue: _FakeUserProfile_2(this, Invocation.getter(#user)),
          )
          as _i2.UserProfile);

  @override
  String get tokenType =>
      (super.noSuchMethod(
            Invocation.getter(#tokenType),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#tokenType),
            ),
          )
          as String);

  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(
            Invocation.method(#toMap, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
